const urls = require('./utils/urls');
const chineseS2T = require('chinese-s2t');
const childProcess = require('child_process');
const webpack = require('webpack');

const gitLastCommitHash = childProcess
  .execSync('git rev-parse HEAD')
  .toString()
  .trim();

module.exports = {
  telemetry: false,
  /*
  ** Headers of the page
  */
  server: {
    port: 3055,
    host: '0.0.0.0',
  },
  head: {
    title: 'viabtc-preset',
    meta: [
      { charset: 'utf-8' },
      {
        name: 'viewport',
        content:
          'width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.0, user-scalable=no, viewport-fit=cover',
      },
      { hid: 'description', name: 'description', content: '' },
    ],
    link: [{ rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }],
  },
  env: {
    MODE: process.env.MODE,
    NODE_ENV: process.env.NODE_ENV,
    NUXT_PORT: process.env.NUXT_PORT,
  },

  /*
  ** Global CSS
  */
  css: [
    { src: '~/assets/scss/global.scss', lang: 'scss' },
    { src: '~/assets/iconfont/iconfont.css', lang: 'css' },
  ],

  purgeCSS: {
    whitelistPatterns: [/el-.+$/],
    whitelistPatternsChildren: [/el-.+$/],
  },
  /*
  ** Plugins to load before mounting the App
  */
  plugins: [
    '@/plugins/element-ui',
    '@/plugins/axios',
    '@/plugins/i18n',
  ],

  /*
  ** Nuxt.js modules
  */
  modules: [
    'cookie-universal-nuxt',
    // Doc: https://github.com/nuxt-community/axios-module#usage
    '@nuxtjs/axios',
    '@nuxtjs/device',
  ],

  /*
  ** Axios module configuration
  */
  axios: {
    baseURL: urls.severApiDomain,
    browserBaseURL: urls.clientApiDomain,
    // See https://github.com/nuxt-community/axios-module#options
  },

  /*
  ** Build configuration
  */
  build: {
    /*
    ** You can extend webpack config here
    */
    extend(config, ctx) {
      // Run ESLint on save
      if (ctx.isDev && ctx.isClient) {
        config.module.rules.push({
          enforce: 'pre',
          test: /\.(js|vue)$/,
          loader: 'eslint-loader',
          exclude: /(node_modules)/,
        });
      }
      let eslintPosition = config.module.rules.findIndex(
        r => r.loader && r.loader.indexOf('eslint') >= 0
      );
      eslintPosition =
        eslintPosition >= 0 ? eslintPosition : config.module.rules.length;
      const vi18nloader = {
        // this loader will generate *.messages.json beside *.vue files
        test: /\.vue$/,
        exclude: [/(node_modules)|(\.nuxt)/],
        loader: 'viai18n-loader',
        enforce: 'pre',
        options: {
          updateMessagesFile: ctx.isClient && ctx.isDev, // only update messages file when it's dev and client(when using ssr)
          cacheTime: 3000,
          // regString to match simplified chinese characters
          regString:
            '[\u4e00-\u9fa5\u3002\uff1b\uff0c\uff1a\u2018\u2019\u201c\u201d\uff08\uff09\u3001\uff1f\uff01\ufe15\u300a\u300b]+',
          // separator: '##', // match texts surrounded by '##', like '##text##'
          // Loader will use existing translations, if there is not, will use text generated by translator
          languages: [
            {
              // the first language declared here will be the default language
              key: 'zh_Hans_CN',
              translator: matched => {
                // Delete repeat mark R, sometimes we need a text to be translated differently
                return matched.replace(/^\[R\]+/, '');
              },
              ignoreDeprecated: true,
            },
            {
              key: 'zh_Hant_HK',
              translator: matched => {
                // example to auto translate simplified chinese to traditional
                return chineseS2T.s2t(matched.replace(/^\[R\]+/, ''));
              },
              ignoreDeprecated: true,
            },
            {
              key: 'en_US',
              // if translator is not given, the loader will use the default translator(translator of the first language, zh_Hans_CN here)
            },
            {
              key: 'ru_RU',
            },
            {
              key: 'es_ES',
            },
            {
              key: 'fa_IR',
            },
          ],
        },
      };
      config.module.rules.splice(eslintPosition, 0, vi18nloader);
    },
    plugins: [
      new webpack.DefinePlugin({
        __VERSION__: JSON.stringify(gitLastCommitHash),
      }),
    ],
  },
  buildModules: [
    '@nuxtjs/tailwindcss',
  ],
  router: {
    middleware: ['i18n'],
  },
  render: {
    csp: 
    /development/.test(process.env.MODE)
    ? undefined
    : {
      reportOnly: false,
      policies: {
        'default-src': [
          `'self'`,
          '*.viabtc.com:*',
          'viabtc.com:*',
          'static.zdassets.com',
          'viabtc.zendesk.com',
          'www.google-analytics.com',
          'stats.g.doubleclick.net',
          'www.youtube-nocookie.com',
        ],
        'script-src': [
          `'unsafe-inline'`,
          `'unsafe-eval'`,
          '*.viabtc.com',
          'viabtc.com',
          'www.google-analytics.com',
          'static.geetest.com',
          '*.zdassets.com',
          'api.geetest.com',
          'monitor.geetest.com',
          'res.wx.qq.com',
          'viabtc.zendesk.com',
          'www.google-analytics.com',
          'stats.g.doubleclick.net',
        ],
        'style-src': [
          `'unsafe-inline'`,
          'at.alicdn.com',
          '*.viabtc.com',
          'viabtc.com',
          'static.geetest.com',
          'viabtc.zendesk.com',
          'dn-staticdown.qbox.me',
        ],
        'img-src': [
          'www.google-analytics.com',
          'www.google.com',
          '*.aliyuncs.com',
          '*.alicdn.com',
          '*.viabtc.com',
          'viabtc.com',
          'viabtcconfig.oss-cn-shenzhen.aliyuncs.com',
          'viapoolconfig.oss-cn-hongkong.aliyuncs.com',
          'data:',
          'stats.g.doubleclick.net',
          'static.geetest.com',
        ],
        'font-src': [
          `'unsafe-inline'`,
          'at.alicdn.com',
          '*.viabtc.com',
          'viabtc.com',
          'data:',
        ],
        'connect-src': [
          '*.viabtc.com:*',
          'viabtc.com:*',
          'viabtc.zendesk.com',
          'viabtc-help.zendesk.com', // zendesk相关
          '*.zdassets.com', // zendesk相关
          'https://widget-mediator.zopim.com', // zendesk相关
          'https://p.extfun.com', // zendesk相关
          'wss://widget-mediator.zopim.com', // zendesk相关
          'www.google-analytics.com',
          'stats.g.doubleclick.net',
        ],
      },
    },
  },
  tailwindcss: {
    cssPath: '~/assets/scss/tailwind.scss',
  },
};
